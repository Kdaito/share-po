/* tslint:disable */
/* eslint-disable */
/**
 * share-po
 * ポートフォリオを共有、評価できるサイトです
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IDResponse,
  PortfolioList,
  PortfolioRequest,
} from '../models';
import {
    IDResponseFromJSON,
    IDResponseToJSON,
    PortfolioListFromJSON,
    PortfolioListToJSON,
    PortfolioRequestFromJSON,
    PortfolioRequestToJSON,
} from '../models';

export interface CreatePortfolioRequest {
    body: PortfolioRequest;
}

export interface GetPortfolioListRequest {
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class PortfolioApi extends runtime.BaseAPI {

    /**
     * ポートフォリオを新規作成します
     * ポートフォリオ新規作成
     */
    async createPortfolioRaw(requestParameters: CreatePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IDResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPortfolio.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/portfolio`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortfolioRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IDResponseFromJSON(jsonValue));
    }

    /**
     * ポートフォリオを新規作成します
     * ポートフォリオ新規作成
     */
    async createPortfolio(requestParameters: CreatePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IDResponse> {
        const response = await this.createPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ポートフォリオを一覧として取得します
     * ポートフォリオ一覧取得
     */
    async getPortfolioListRaw(requestParameters: GetPortfolioListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioList>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/portfolio`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioListFromJSON(jsonValue));
    }

    /**
     * ポートフォリオを一覧として取得します
     * ポートフォリオ一覧取得
     */
    async getPortfolioList(requestParameters: GetPortfolioListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioList> {
        const response = await this.getPortfolioListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
